"""WAN Super Video/image Generator - Main Landing Page
The Angel Studio - Professional AI Video Generation Tools
"""
import gradio as gr
from api.api_interface import create_api_interface
from local.local_interface import create_local_interface

def create_greeting_content():
    """Create greeting/welcome content"""
    return gr.Markdown(
        """
        <div style="text-align: center; padding: 60px 40px;">
            <h1 style="font-size: 4em; margin-bottom: 20px; background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
                üé¨ THE ANGEL STUDIO
            </h1>
            <h2 style="font-size: 2.5em; margin-bottom: 30px; color: #34495e;">
                WAN 2.5 Video Generator
            </h2>
            <p style="font-size: 1.4em; color: #7f8c8d; margin-bottom: 40px;">
                Professional AI Video Generation Tools
            </p>
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 15px; color: white; margin: 40px 0;">
                <h3 style="margin-bottom: 20px; font-size: 1.5em;">üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
                <p style="font-size: 1.1em; line-height: 1.6;">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –ª–µ–≤–æ–≥–æ –º–µ–Ω—é. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–ª–∞—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.</p>
            </div>
        </div>
        """
    )

def create_about_content():
    """Create about project content"""
    return gr.Markdown(
        """
        # üìñ –û –ø—Ä–æ–µ–∫—Ç–µ WAN Super
        
        **WAN Super** ‚Äî —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
        
        ## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        ### üîë API Mode (–û–±–ª–∞—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        - ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Alibaba Cloud WAN 2.5 API
        - ‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ GPU
        - ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ text2video –∏ img2video
        - ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á (—Ñ–æ—Ä–º–∞—Ç: sk-...)
        
        ### üè† Local Mode (–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
        - ‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        - ‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–ª–∞—á–Ω—ã—Ö API –∫–ª—é—á–µ–π
        - ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
        - ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        - ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –º–æ—â–Ω–æ–µ GPU (4GB+ VRAM)
        
        ## üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        
        - **text2video**: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        - **img2video**: –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤–∏–¥–µ–æ
        - **–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ**: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ —á–∞—Å—Ç–æ—Ç –∫–∞–¥—Ä–æ–≤
        - **–ì–∏–±–∫–æ—Å—Ç—å**: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, FPS –∏ seed
        
        ## üìÅ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        
        ```
        WanSuper/
        ‚îú‚îÄ‚îÄ main.py                 # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–µ–Ω—é
        ‚îú‚îÄ‚îÄ api/                    # API-—Ä–µ–∂–∏–º (–æ–±–ª–∞—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        ‚îÇ   ‚îú‚îÄ‚îÄ wan_api.py          # DashScope API –∫–ª–∏–µ–Ω—Ç
        ‚îÇ   ‚îî‚îÄ‚îÄ api_interface.py    # Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è API
        ‚îú‚îÄ‚îÄ local/                  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        ‚îÇ   ‚îî‚îÄ‚îÄ local_interface.py  # –ì—Ä–∞–¥–∏–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        ‚îú‚îÄ‚îÄ requirements.txt        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        ‚îî‚îÄ‚îÄ README.md               # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        ```
        
        ---
        
        <div style="text-align: center; padding: 20px; background: #f8f9fa; border-radius: 10px; margin: 20px 0;">
            <p style="color: #666; font-style: italic;">Made with ‚ù§Ô∏è by The Angel Studio</p>
        </div>
        """
    )

def create_support_content():
    """Create support content"""
    return gr.Markdown(
        """
        # üåü –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å The Angel Studio
        
        –ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!
        
        ## üíù –°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        
        ### üé® Boosty
        –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏:
        
        **[üëâ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Boosty](https://boosty.to/the_angel)**
        
        ### üêõ GitHub
        –ü–æ–º–æ–≥–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:
        - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ Issues –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
        - –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        - –î–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–∞–º–∏
        
        **[üëâ GitHub Repository](https://github.com/sanek1989/WanSuper)**
        
        ## üöÄ –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
        
        - üîÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        - üé® –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        - üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
        - üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        - üîß –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        ## üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã
        
        - **üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ Issues –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        - **üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞**: [Boosty](https://boosty.to/the_angel)
        - **üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: README.md –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        
        ---
        
        <div style="text-align: center; padding: 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; color: white; margin: 30px 0;">
            <h3 style="margin-bottom: 15px;">üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</h3>
            <p style="font-size: 1.1em; margin: 0;">–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—É—á—à–∏–µ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤</p>
        </div>
        """
    )

def create_main_interface():
    """Create main interface with sidebar navigation"""
    
    # Define the navigation structure
    nav_items = [
        ("üè† –ì–ª–∞–≤–Ω–∞—è", "home"),
        ("üîë –û–±–ª–∞—á–Ω—ã–π —Ä–µ–∂–∏–º (API)", "api"),
        ("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º", "local"),
        ("üìñ –û –ø—Ä–æ–µ–∫—Ç–µ", "about"),
        ("üåü –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "support")
    ]
    
    with gr.Blocks(
        title="The Angel Studio - WAN Super",
        theme=gr.themes.Soft()
    ) as demo:
        
        with gr.Row():
            # Left sidebar with navigation
            with gr.Column(scale=1, min_width=250):
                gr.Markdown(
                    """
                    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 10px; color: white; margin-bottom: 20px;">
                        <h3 style="margin: 0; font-size: 1.2em;">üé¨ THE ANGEL STUDIO</h3>
                        <p style="margin: 5px 0 0 0; font-size: 0.9em; opacity: 0.9;">WAN Super Generator</p>
                    </div>
                    """
                )
                
                # Navigation buttons
                nav_buttons = {}
                for label, key in nav_items:
                    nav_buttons[key] = gr.Button(
                        label,
                        variant="primary" if key == "home" else "secondary",
                        size="lg",
                        elem_classes=["nav-button"]
                    )
            
            # Main content area
            with gr.Column(scale=3):
                # Content containers (all hidden initially except home)
                content_components = {}
                
                with gr.Column(visible=True) as home_content:
                    content_components["home"] = create_greeting_content()
                
                with gr.Column(visible=False) as api_content:
                    content_components["api"] = create_api_interface()
                
                with gr.Column(visible=False) as local_content:
                    content_components["local"] = create_local_interface()
                
                with gr.Column(visible=False) as about_content:
                    content_components["about"] = create_about_content()
                
                with gr.Column(visible=False) as support_content:
                    content_components["support"] = create_support_content()
                
                # Map content containers
                content_containers = {
                    "home": home_content,
                    "api": api_content,
                    "local": local_content,
                    "about": about_content,
                    "support": support_content
                }
        
        def switch_section(section_key):
            """Switch to the selected section"""
            updates = []
            
            # Hide all content containers and show only the selected one
            for key in ["home", "api", "local", "about", "support"]:
                updates.append(gr.update(visible=(key == section_key)))
            
            # Update button variants
            for key in ["home", "api", "local", "about", "support"]:
                updates.append(gr.update(
                    variant="primary" if key == section_key else "secondary"
                ))
            
            return updates
        
        # Set up navigation click handlers
        for key, button in nav_buttons.items():
            button.click(
                fn=lambda k=key: switch_section(k),
                inputs=[],
                outputs=[
                    home_content,
                    api_content,
                    local_content,
                    about_content,
                    support_content,
                    nav_buttons["home"],
                    nav_buttons["api"],
                    nav_buttons["local"],
                    nav_buttons["about"],
                    nav_buttons["support"]
                ]
            )
    
    return demo

if __name__ == "__main__":
    print("‚ú® Starting The Angel Studio - WAN Super Video/image Generator...")
    print("üåê Server will be available at: http://localhost:7860")
    print("üåü Support us: https://boosty.to/the_angel")
    
    demo = create_main_interface()
    
    demo.launch(
        server_name="localhost",
        server_port=7860,
        share=False,
        show_error=True
    )
